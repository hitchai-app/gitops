# GitHub Actions Runner Scale Set - hitchai-app-lite
#
# Lightweight Runner Strategy (NO Docker-in-Docker):
# - Minimal resource footprint: 4Gi runner container only
# - For workflows that don't need Docker (linting, unit tests, type checks)
# - 12 concurrent runners for maximum parallelism
# - Per-pod: ~4Gi limits (dramatically lighter than 18Gi heavy runners)
# - Use heavy runners for workflows requiring Docker builds

# Required: GitHub configuration
githubConfigUrl: "https://github.com/hitchai-app"
githubConfigSecret: "hitchai-app-github-app"

# CRITICAL: This name must match the runs-on label in workflows
# Use this in workflows with: runs-on: hitchai-app-runners-lite
runnerScaleSetName: "hitchai-app-runners-lite"

# Scaling
# Lightweight runner strategy: 12 concurrent runners (no DinD overhead)
# Per-pod: ~4Gi limit (runner only)
# 12 runners Ã— 4Gi = 48Gi (38% of 128GB cluster)
maxRunners: 12

# Runner pod template
# Documentation: https://docs.github.com/en/actions/hosting-your-own-runners/managing-self-hosted-runners-with-actions-runner-controller/deploying-runner-scale-sets-with-actions-runner-controller
# NOTE: No DinD - workflows requiring Docker must use heavy runners (hitchai-app-runners)
template:
  spec:
    # ServiceAccount with read-only cluster access for kubectl operations
    # Used by Claude Code in GitHub Actions to verify deployments, check pod status, etc.
    serviceAccountName: github-actions-reviewer
    initContainers:
    - name: install-kubectl
      image: curlimages/curl:8.9.1
      command: ["/bin/sh", "-c"]
      args:
        - |
          set -euo pipefail
          arch="$(uname -m)"
          case "${arch}" in
            x86_64) kube_arch=amd64 ;;
            aarch64) kube_arch=arm64 ;;
            *)
              echo "unsupported architecture: ${arch}" >&2
              exit 1
              ;;
          esac
          tmp_dir="$(mktemp -d)"
          trap 'rm -rf "${tmp_dir}"' EXIT
          curl -fsSL "https://dl.k8s.io/release/$(curl -fsSL https://dl.k8s.io/release/stable.txt)/bin/linux/${kube_arch}/kubectl" -o "${tmp_dir}/kubectl"
          install -m 0755 "${tmp_dir}/kubectl" /opt/tools/kubectl
      volumeMounts:
      - name: runner-tools
        mountPath: /opt/tools
    containers:
    - name: runner
      image: ghcr.io/actions/actions-runner:latest
      command: ["/home/runner/run.sh"]
      # Lightweight runner strategy: Minimal limits for maximum parallelism
      # No Docker daemon overhead - suitable for linting, unit tests, type checking
      resources:
        requests:
          cpu: "100m"
          memory: "256Mi"
        limits:
          cpu: "1000m"
          memory: "4Gi"
      env:
      - name: PATH
        value: /opt/tools:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
      volumeMounts:
      - name: work
        mountPath: /home/runner/_work
      - name: runner-tools
        mountPath: /opt/tools

    volumes:
    # Minimal volume configuration - just workflow workspace
    - name: work
      emptyDir:
        medium: Memory
        sizeLimit: 2Gi  # Workflow workspace
    - name: runner-tools
      emptyDir:
        medium: Memory
        sizeLimit: 200Mi  # Shared CLI binaries (kubectl)

# Explicitly link this scale set to the controller the chart failed to discover automatically.
controllerServiceAccount:
  namespace: arc-systems
  name: arc-gha-rs-controller
