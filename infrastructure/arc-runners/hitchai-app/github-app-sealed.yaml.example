# Example: Sealed Secret for GitHub App Authentication
#
# Create sealed secret from existing Kubernetes secret:
#
# 1. Fetch cert:
#    kubeseal --fetch-cert > sealed-secrets-pub.pem
#
# 2. Extract and rename existing secret:
#    kubectl get secret pre-defined-secret -n arc-runners -o yaml | \
#      sed 's/name: pre-defined-secret/name: hitchai-app-github-app/' | \
#      sed '/uid:/d' | sed '/resourceVersion:/d' | sed '/creationTimestamp:/d' \
#      > /tmp/secret.yaml
#
# 3. Seal it:
#    kubeseal --format=yaml --cert=sealed-secrets-pub.pem \
#      < /tmp/secret.yaml > github-app-sealed.yaml
#
# 4. Clean up:
#    rm /tmp/secret.yaml sealed-secrets-pub.pem
#
# 5. Commit:
#    git add github-app-sealed.yaml
#
# GitHub App Setup (if creating new):
# - Settings → Developer settings → GitHub Apps → New
# - Permissions: Actions (read/write), Metadata (read)
# - Install on organization
# - Generate private key, note App ID and Installation ID

---
apiVersion: bitnami.com/v1alpha1
kind: SealedSecret
metadata:
  name: hitchai-app-github-app
  namespace: arc-runners
spec:
  encryptedData:
    github_app_id: SEALED_SECRET_DATA_HERE
    github_app_installation_id: SEALED_SECRET_DATA_HERE
    github_app_private_key: SEALED_SECRET_DATA_HERE
  template:
    metadata:
      name: hitchai-app-github-app
      namespace: arc-runners
    type: Opaque
