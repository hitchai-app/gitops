name: Claude Code Review

on:
  pull_request:
    types: [opened, synchronize]
    # Optional: Only run on specific file changes
    # paths:
    #   - "src/**/*.ts"
    #   - "src/**/*.tsx"
    #   - "src/**/*.js"
    #   - "src/**/*.jsx"

jobs:
  claude-review:
    # Optional: Filter by PR author
    # if: |
    #   github.event.pull_request.user.login == 'external-contributor' ||
    #   github.event.pull_request.user.login == 'new-developer' ||
    #   github.event.pull_request.author_association == 'FIRST_TIME_CONTRIBUTOR'

    runs-on: hitchai-app-runners-lite  # Self-hosted runner with kubectl cluster access
    permissions:
      contents: read
      pull-requests: write # Allow creating reviews and comments
      issues: write # Allow commenting on issues
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Run Claude Code Review
        id: claude-review
        uses: anthropics/claude-code-action@beta
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}

          # Allow all bots to trigger the review
          allowed_bots: '*'

          # Use sticky comments for consistent review updates
          use_sticky_comment: true

          # Allow gh CLI and kubectl for PR reviews
          # kubectl: RBAC enforces read-only access at cluster level (ServiceAccount: github-actions-reviewer)
          allowed_tools: |
            Bash(gh pr:*)
            Bash(kubectl:*)

          # Direct prompt for automated review (no @claude mention needed)
          direct_prompt: |
            You are reviewing PR #${{ github.event.pull_request.number }} in ${{ github.repository }}.

            CLUSTER ACCESS:
            You have read-only kubectl access to the cluster. Use it to verify:
            - ArgoCD Application health: `kubectl get applications -n argocd`
            - Pod status: `kubectl get pods -n <namespace>`
            - Resource usage: `kubectl top pods -n <namespace>`
            - Recent events: `kubectl get events -n <namespace> --sort-by='.lastTimestamp'`

            REVIEW PROCESS:
            1. **Provide detailed review feedback in THIS comment** (action creates this automatically)
            2. Get PR diff: `gh pr diff ${{ github.event.pull_request.number }}`
            3. Review CLAUDE.md and ADRs for architectural context
            4. **Verify cluster state** using kubectl if reviewing infrastructure changes
            5. Analyze changes against review criteria
            5. **Submit clean formal review WITHOUT duplicate content:**
               - APPROVE: `gh pr review ${{ github.event.pull_request.number }} --approve` (no --body to avoid duplicates)
               - REQUEST_CHANGES: `gh pr review ${{ github.event.pull_request.number }} --request-changes`
               - COMMENT: `gh pr review ${{ github.event.pull_request.number }} --comment`

            **USE SUGGESTION BLOCKS** for actionable fixes (one-click apply):
            ```suggestion
            fixed code here
            ```

            **KUBECTL USAGE GUIDELINES:**
            - Use kubectl's built-in filtering instead of shell pipes (grep, awk, etc.)
            - Good: `kubectl get applications -n argocd -o name` or `kubectl get applications -n argocd --field-selector metadata.name=longhorn`
            - Avoid: `kubectl get applications -n argocd | grep longhorn` (pipe operators require separate approval)
            - You have access to kubectl for cluster verification - use it to validate infrastructure state

            Review criteria (GitOps infrastructure - changes affect production):
            - What will fail in production
            - Resource limits and cluster impact
            - Breaking changes to existing workloads
            - Security vulnerabilities
            - Missing validations or error handling
            - Untested edge cases
            - Alignment with ADR patterns

            Be skeptical and critical. If something looks wrong, it probably is.

            Verdict rules:
            - APPROVE: Only if no blocking issues AND aligns with ADRs
            - REQUEST_CHANGES: If any blocking concerns exist
            - COMMENT: For minor suggestions only

            CRITICAL: Submit formal review with `gh pr review` - do NOT just post a comment!

