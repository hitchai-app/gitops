name: Claude Code

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  issues:
    types: [opened, assigned]
  pull_request_review:
    types: [submitted]

jobs:
  claude:
    if: |
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review' && contains(github.event.review.body, '@claude')) ||
      (github.event_name == 'issues' && (contains(github.event.issue.body, '@claude') || contains(github.event.issue.title, '@claude')))
    runs-on: ubuntu-latest
    permissions:
      contents: write # Allow file operations and branch creation
      pull-requests: write # Allow PR creation, comments, reviews
      issues: write # Allow issue comments and updates
      id-token: write
      actions: read # Required for Claude to read CI results on PRs
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Run Claude Code
        id: claude
        uses: anthropics/claude-code-action@v1
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}

          # This is an optional setting that allows Claude to read CI results on PRs
          additional_permissions: |
            actions: read

          # Optional: Give a custom prompt to Claude. If this is not specified, Claude will perform the instructions specified in the comment that tagged it.
          # prompt: 'Update the pull request description to include a summary of changes.'

          # Allow broad tool access for GitOps operations
          # Branch protection on master prevents direct pushes
          # kubectl: readonly access only (no certs for write operations anyway)
          allowed_tools: |
            Bash(kubectl get:*),
            Bash(kubectl describe:*),
            Bash(kubectl logs:*),
            Bash(kubectl top:*),
            Bash(kubectl explain:*),
            Bash(helm:*),
            Bash(kustomize:*),
            Bash(argocd:*),
            Bash(git:*),
            Bash(gh:*),
            Bash(gh pr:*),
            Bash(yq:*),
            Bash(jq:*),
            Bash(cat:*),
            Bash(ls:*),
            Bash(grep:*),
            Bash(find:*),
            mcp__github__*

          # Enhanced prompt: Provides PR review capabilities when invoked on PRs
          direct_prompt: |
            You are responding to a @claude mention in ${{ github.repository }}.

            WHEN REVIEWING A PR (if context is a pull request):
            1. **Provide detailed review feedback in your comment** (GitHub creates this automatically)
            2. Get PR diff if needed: `gh pr diff <PR_NUMBER>`
            3. Review CLAUDE.md and ADRs for architectural context
            4. Analyze changes against review criteria
            5. **Submit clean formal review WITHOUT duplicate content:**
               - APPROVE: `gh pr review <PR_NUMBER> --approve`
               - REQUEST_CHANGES: `gh pr review <PR_NUMBER> --request-changes`
               - COMMENT: `gh pr review <PR_NUMBER> --comment`

            CRITICAL: Use gh commands WITHOUT --body to avoid duplicate content.
            Put ALL detailed review analysis in your comment, keep formal review clean.

            **CREATE INLINE COMMENTS WITH PATCHES when appropriate:**
            For line-specific fixes that can be applied with one click:
            ```
            gh api repos/${{ github.repository }}/pulls/<PR_NUMBER>/reviews \
              --method POST --input - << 'EOF'
            {
              "event": "COMMENT",
              "body": "Review with actionable suggestions",
              "comments": [
                {
                  "body": "## Fix description\n\n```suggestion\ncorrected code here\n```\n\nExplanation of the fix...",
                  "path": "path/to/file.ext",
                  "line": 42,
                  "side": "RIGHT"
                }
              ]
            }
            EOF
            ```
            **Important:** Line must be part of the PR diff. Use ```suggestion blocks for clickable patches.

            Review criteria (GitOps infrastructure - changes affect production):
            - Production failure risks and resource impact
            - Breaking changes to existing workloads
            - Security vulnerabilities and missing validations
            - Alignment with ADR patterns and architecture
            - Untested edge cases and error handling

            Be critical and thorough. Detailed analysis goes in your comment, formal review action is just approve/reject/comment.

            Verdict rules:
            - APPROVE: Only if no blocking issues AND aligns with ADRs
            - REQUEST_CHANGES: If any blocking concerns exist
            - COMMENT: For minor suggestions only

            FOR NON-PR TASKS: Follow the user's instructions as requested in their @claude mention.

